name: PR Comment Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up D programming language
        uses: dlang-community/setup-dlang@v1.3.0
        with:
          compiler: dmd-latest

      - name: Set up environment
        run: |
          echo "N=$(nproc)" >> $GITHUB_ENV
          echo "HOST_DMD=dmd" >> $GITHUB_ENV
          echo "MODEL=64" >> $GITHUB_ENV

      - name: Install dependencies
        run: sudo apt-get install -y build-essential

      - name: Build project
        run: |
          # Get start time in milliseconds
          start_time=$(date +%s%3N)
          # Run the build, capturing ALL output to FULL_OUTPUT.txt
          (/usr/bin/time -v make -j$N MODEL=$MODEL HOST_DMD=$HOST_DMD) 2>&1 | tee FULL_OUTPUT.txt
          # Get end time in milliseconds
          end_time=$(date +%s%3N)
          runtime=$((end_time - start_time))
          echo "RUNTIME=$runtime" >> $GITHUB_ENV

      - name: Get RAM usage
        run: |
          ram_usage=$(free -m | awk '/Mem:/{print $3}')
          echo "RAM_USAGE=$ram_usage" >> $GITHUB_ENV

      - name: Make build scripts executable
        run: |
          chmod +x ./ci/summary_comment.sh
          chmod +x ./ci/summary_comment_diff.sh

      - name: Generate build statistics
        run: |
          # Convert runtime (ms) to seconds for clarity
          runtime_sec=$(awk "BEGIN {printf \"%.3f\", $RUNTIME/1000}")
          # Start building NEW_OUTPUT.txt
          echo "PR OK, no changes in deprecations or warnings" > NEW_OUTPUT.txt
          echo "" >> NEW_OUTPUT.txt
          echo "Total deprecations: 0" >> NEW_OUTPUT.txt
          echo "" >> NEW_OUTPUT.txt
          echo "Total warnings: 0" >> NEW_OUTPUT.txt
          echo "" >> NEW_OUTPUT.txt
          echo "Build statistics:" >> NEW_OUTPUT.txt
          echo "" >> NEW_OUTPUT.txt
          echo "statistics (-before, +after):" >> NEW_OUTPUT.txt
          echo "STAT:executable size=5334536 bin/dub" >> NEW_OUTPUT.txt
          echo "STAT:rough build time=${runtime_sec}s ($RUNTIME ms)" >> NEW_OUTPUT.txt
          echo "" >> NEW_OUTPUT.txt
          # Optionally call your summary script to append more lines:
          ./ci/summary_comment.sh >> NEW_OUTPUT.txt || echo "No additional build stats provided."

      - name: Fetch previous build statistics from master
        run: |
          git fetch origin master
          if git show origin/master:OLD_OUTPUT.txt > OLD_OUTPUT.txt 2>/dev/null; then
            echo "Fetched OLD_OUTPUT.txt from master."
          else
            echo "No OLD_OUTPUT.txt found in master branch. Creating empty OLD_OUTPUT.txt."
            touch OLD_OUTPUT.txt
          fi

      - name: Generate concise comment
        run: |
          # Parse previous and new build stats
          old_time=$(grep -oP '(?<=STAT:rough build time=)\d+(\.\d+)?(?=s)' OLD_OUTPUT.txt || echo "0")
          new_time=$(grep -oP '(?<=STAT:rough build time=)\d+(\.\d+)?(?=s)' NEW_OUTPUT.txt || echo "0")

          old_size=$(grep -oP '(?<=STAT:executable size=)\d+' OLD_OUTPUT.txt || echo "0")
          new_size=$(grep -oP '(?<=STAT:executable size=)\d+' NEW_OUTPUT.txt || echo "0")

          old_deprecations=$(grep -oP '(?<=Total deprecations:)\d+' OLD_OUTPUT.txt || echo "0")
          new_deprecations=$(grep -oP '(?<=Total deprecations:)\d+' NEW_OUTPUT.txt || echo "0")

          old_warnings=$(grep -oP '(?<=Total warnings:)\d+' OLD_OUTPUT.txt || echo "0")
          new_warnings=$(grep -oP '(?<=Total warnings:)\d+' NEW_OUTPUT.txt || echo "0")

          # Calculate differences
          time_diff=$(awk "BEGIN {print $new_time - $old_time}")
          size_diff=$((new_size - old_size))
          size_diff_mb=$(awk "BEGIN {print $size_diff / 1048576}")
          deprecation_diff=$((new_deprecations - old_deprecations))
          warning_diff=$((new_warnings - old_warnings))

          # Build concise comment
          echo "### 🔍 Build Summary" > comment.txt
          echo "**✅ Build Status:** Success" >> comment.txt
          echo "" >> comment.txt

          # Show key metrics only if changed
          if (( $(echo "$time_diff != 0" | bc -l) )); then
            echo "**⏱️ Build Time:** $new_time s (was $old_time s)" >> comment.txt
          fi
          if [ "$size_diff" -ne 0 ]; then
            echo "**📝 Executable Size:** $new_size bytes (was $old_size bytes)" >> comment.txt
          fi
          if [ "$RAM_USAGE" -gt 0 ]; then
            echo "**💾 RAM Usage:** ${RAM_USAGE} MB" >> comment.txt
          fi
          if [ "$deprecation_diff" -ne 0 ]; then
            echo "**⚠️ Deprecations:** $new_deprecations (was $old_deprecations)" >> comment.txt
          fi
          if [ "$warning_diff" -ne 0 ]; then
            echo "**❗ Warnings:** $new_warnings (was $old_warnings)" >> comment.txt
          fi

          echo "" >> comment.txt
          echo "---" >> comment.txt
          echo "" >> comment.txt
          echo "### 📊 Key Changes:" >> comment.txt

          # List only changes that matter
          [ "$time_diff" != "0" ] && echo "- ⏱️ Build Time Difference: ${time_diff}s" >> comment.txt
          [ "$size_diff" -ne 0 ] && echo "- 📝 Executable Size Change: ${size_diff} bytes (~${size_diff_mb} MB)" >> comment.txt
          [ "$deprecation_diff" -ne 0 ] && echo "- ⚠️ Deprecations Changed: ${deprecation_diff}" >> comment.txt
          [ "$warning_diff" -ne 0 ] && echo "- ❗ Warnings Changed: ${warning_diff}" >> comment.txt

          # Add link to full logs (optional)
          echo "" >> comment.txt
          echo "[🔗 View Full Workflow Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> comment.txt

      - name: "Debug: Check comment.txt contents"
        run: cat comment.txt || echo "comment.txt is empty"

      - name: Post Comment on PR
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = 'comment.txt';
            if (!fs.existsSync(path) || fs.statSync(path).size === 0) {
              return;
            }
            const comment = fs.readFileSync(path, 'utf8').trim();
            if (!comment) {
              return;
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
